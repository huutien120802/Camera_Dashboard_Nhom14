{"ast":null,"code":"import { toast } from 'react-toastify';\nimport { put, takeLeading } from 'redux-saga/effects';\nimport authAPI from 'apis/auth/authAPI';\nimport { removeSpacesWithTrim } from 'utils';\nimport { REGISTER } from './actionTypes';\nimport { actionRegisterSuccess, actionRegisterFailed } from './actions';\nfunction register(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    try {\n      const {\n        values: {\n          username,\n          email,\n          password\n        },\n        callback\n      } = payload;\n      const newData = removeSpacesWithTrim({\n        username,\n        email,\n        password\n      });\n      yield authAPI.register(newData);\n      yield put(actionRegisterSuccess());\n      toast.success('User has been registered successfully.');\n      callback();\n    } catch (error) {\n      toast.error(error.response.data);\n      yield put(actionRegisterFailed());\n    }\n  }();\n}\nexport default function* registerSaga() {\n  yield takeLeading(REGISTER, register);\n}","map":{"version":3,"names":["toast","put","takeLeading","authAPI","removeSpacesWithTrim","REGISTER","actionRegisterSuccess","actionRegisterFailed","register","_ref","payload","values","username","email","password","callback","newData","success","error","response","data","registerSaga"],"sources":["D:/HKII-2023/Camera_Dashboard_Nhom14/src/store/auth/register/saga.js"],"sourcesContent":["import { toast } from 'react-toastify';\r\nimport { put, takeLeading } from 'redux-saga/effects';\r\n\r\nimport authAPI from 'apis/auth/authAPI';\r\nimport { removeSpacesWithTrim } from 'utils';\r\n\r\nimport { REGISTER } from './actionTypes';\r\nimport {\r\n  actionRegisterSuccess,\r\n  actionRegisterFailed,\r\n} from './actions';\r\n\r\nfunction* register({ payload }) {\r\n  try {\r\n    const {\r\n      values: {\r\n        username,\r\n        email,\r\n        password,\r\n      },\r\n\r\n      callback,\r\n    } = payload;\r\n\r\n    const newData = removeSpacesWithTrim({\r\n      username,\r\n      email,\r\n      password,\r\n    });\r\n\r\n    yield authAPI.register(newData);\r\n\r\n    yield put(actionRegisterSuccess());\r\n\r\n    toast.success('User has been registered successfully.');\r\n\r\n    callback();\r\n  } catch (error) {\r\n    toast.error(error.response.data);\r\n\r\n    yield put(actionRegisterFailed());\r\n  }\r\n}\r\n\r\nexport default function* registerSaga() {\r\n  yield takeLeading(REGISTER, register);\r\n}\r\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,SAASC,GAAG,EAAEC,WAAW,QAAQ,oBAAoB;AAErD,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SAASC,oBAAoB,QAAQ,OAAO;AAE5C,SAASC,QAAQ,QAAQ,eAAe;AACxC,SACEC,qBAAqB,EACrBC,oBAAoB,QACf,WAAW;AAElB,SAAUC,QAAQA,CAAAC,IAAA;EAAA,IAAC;IAAEC;EAAQ,CAAC,GAAAD,IAAA;EAAA,oBAAE;IAC9B,IAAI;MACF,MAAM;QACJE,MAAM,EAAE;UACNC,QAAQ;UACRC,KAAK;UACLC;QACF,CAAC;QAEDC;MACF,CAAC,GAAGL,OAAO;MAEX,MAAMM,OAAO,GAAGZ,oBAAoB,CAAC;QACnCQ,QAAQ;QACRC,KAAK;QACLC;MACF,CAAC,CAAC;MAEF,MAAMX,OAAO,CAACK,QAAQ,CAACQ,OAAO,CAAC;MAE/B,MAAMf,GAAG,CAACK,qBAAqB,CAAC,CAAC,CAAC;MAElCN,KAAK,CAACiB,OAAO,CAAC,wCAAwC,CAAC;MAEvDF,QAAQ,CAAC,CAAC;IACZ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdlB,KAAK,CAACkB,KAAK,CAACA,KAAK,CAACC,QAAQ,CAACC,IAAI,CAAC;MAEhC,MAAMnB,GAAG,CAACM,oBAAoB,CAAC,CAAC,CAAC;IACnC;EACF,CAAC;AAAA;AAED,eAAe,UAAUc,YAAYA,CAAA,EAAG;EACtC,MAAMnB,WAAW,CAACG,QAAQ,EAAEG,QAAQ,CAAC;AACvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}